// Code generated by MockGen. DO NOT EDIT.
// Source: D:/go/middleware-cms-api/domain/user_menu/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "middleware-cms-api/domain/user_menu/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockUserMenuRepository is a mock of UserMenuRepository interface.
type MockUserMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserMenuRepositoryMockRecorder
}

// MockUserMenuRepositoryMockRecorder is the mock recorder for MockUserMenuRepository.
type MockUserMenuRepositoryMockRecorder struct {
	mock *MockUserMenuRepository
}

// NewMockUserMenuRepository creates a new mock instance.
func NewMockUserMenuRepository(ctrl *gomock.Controller) *MockUserMenuRepository {
	mock := &MockUserMenuRepository{ctrl: ctrl}
	mock.recorder = &MockUserMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMenuRepository) EXPECT() *MockUserMenuRepositoryMockRecorder {
	return m.recorder
}

// CommitTransaction mocks base method.
func (m *MockUserMenuRepository) CommitTransaction(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockUserMenuRepositoryMockRecorder) CommitTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockUserMenuRepository)(nil).CommitTransaction), tx)
}

// CreateData mocks base method.
func (m *MockUserMenuRepository) CreateData(ctx context.Context, request model.User, tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, request, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockUserMenuRepositoryMockRecorder) CreateData(ctx, request, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockUserMenuRepository)(nil).CreateData), ctx, request, tx)
}

// CreateDataUserAuth mocks base method.
func (m *MockUserMenuRepository) CreateDataUserAuth(ctx context.Context, request model.UserAuth, tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataUserAuth", ctx, request, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataUserAuth indicates an expected call of CreateDataUserAuth.
func (mr *MockUserMenuRepositoryMockRecorder) CreateDataUserAuth(ctx, request, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataUserAuth", reflect.TypeOf((*MockUserMenuRepository)(nil).CreateDataUserAuth), ctx, request, tx)
}

// DeleteData mocks base method.
func (m *MockUserMenuRepository) DeleteData(ctx context.Context, id string, tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, id, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockUserMenuRepositoryMockRecorder) DeleteData(ctx, id, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockUserMenuRepository)(nil).DeleteData), ctx, id, tx)
}

// DeleteDataUserAuth mocks base method.
func (m *MockUserMenuRepository) DeleteDataUserAuth(ctx context.Context, userId string, tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataUserAuth", ctx, userId, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataUserAuth indicates an expected call of DeleteDataUserAuth.
func (mr *MockUserMenuRepositoryMockRecorder) DeleteDataUserAuth(ctx, userId, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataUserAuth", reflect.TypeOf((*MockUserMenuRepository)(nil).DeleteDataUserAuth), ctx, userId, tx)
}

// GetDataById mocks base method.
func (m *MockUserMenuRepository) GetDataById(id string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataById", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataById indicates an expected call of GetDataById.
func (mr *MockUserMenuRepositoryMockRecorder) GetDataById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataById", reflect.TypeOf((*MockUserMenuRepository)(nil).GetDataById), id)
}

// GetDataMenuById mocks base method.
func (m *MockUserMenuRepository) GetDataMenuById(id int) (model.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataMenuById", id)
	ret0, _ := ret[0].(model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataMenuById indicates an expected call of GetDataMenuById.
func (mr *MockUserMenuRepositoryMockRecorder) GetDataMenuById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataMenuById", reflect.TypeOf((*MockUserMenuRepository)(nil).GetDataMenuById), id)
}

// GetDataUserMenuById mocks base method.
func (m *MockUserMenuRepository) GetDataUserMenuById(id string) ([]model.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataUserMenuById", id)
	ret0, _ := ret[0].([]model.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataUserMenuById indicates an expected call of GetDataUserMenuById.
func (mr *MockUserMenuRepositoryMockRecorder) GetDataUserMenuById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataUserMenuById", reflect.TypeOf((*MockUserMenuRepository)(nil).GetDataUserMenuById), id)
}

// GetList mocks base method.
func (m *MockUserMenuRepository) GetList(request model.User) (model.GetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", request)
	ret0, _ := ret[0].(model.GetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockUserMenuRepositoryMockRecorder) GetList(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockUserMenuRepository)(nil).GetList), request)
}

// GetListDataMenu mocks base method.
func (m *MockUserMenuRepository) GetListDataMenu() ([]model.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDataMenu")
	ret0, _ := ret[0].([]model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDataMenu indicates an expected call of GetListDataMenu.
func (mr *MockUserMenuRepositoryMockRecorder) GetListDataMenu() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDataMenu", reflect.TypeOf((*MockUserMenuRepository)(nil).GetListDataMenu))
}

// OpenTransaction mocks base method.
func (m *MockUserMenuRepository) OpenTransaction() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTransaction")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// OpenTransaction indicates an expected call of OpenTransaction.
func (mr *MockUserMenuRepositoryMockRecorder) OpenTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTransaction", reflect.TypeOf((*MockUserMenuRepository)(nil).OpenTransaction))
}

// RollbackTransaction mocks base method.
func (m *MockUserMenuRepository) RollbackTransaction(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockUserMenuRepositoryMockRecorder) RollbackTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockUserMenuRepository)(nil).RollbackTransaction), tx)
}

// UpdateData mocks base method.
func (m *MockUserMenuRepository) UpdateData(ctx context.Context, request model.User, tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, request, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockUserMenuRepositoryMockRecorder) UpdateData(ctx, request, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockUserMenuRepository)(nil).UpdateData), ctx, request, tx)
}
