name: CI/CD Pipeline

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2 
    - name: Create .env File
      run: |
          echo "ENV=${{ secrets.ENV }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "APP_VERSION=${{ secrets.APP_VERSION }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "ENABLE_APP_PREFORK=${{ secrets.ENABLE_APP_PREFORK }}" >> .env
          echo "LOG_PATH=${{ secrets.LOG_PATH }}" >> .env
          echo "LOG_PREFIX=${{ secrets.LOG_PREFIX }}" >> .env
          echo "LOG_EXT=${{ secrets.LOG_EXT }}" >> .env
          echo "ENABLE_REQUEST_LOG=${{ secrets.ENABLE_REQUEST_LOG }}" >> .env
          echo "API_TOKEN=${{ secrets.API_TOKEN }}" >> .env
          echo "CHANNEL_ID=${{ secrets.CHANNEL_ID }}" >> .env

    - name: Verify .env File (Optional)
      run: cat .env  # Only for debugging, remove in production!

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      run: |
        docker build -t myapp .

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales
