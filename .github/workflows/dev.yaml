name: CI/CD Pipeline

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2 

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      run: |
        docker build -t myapp .

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: SSH into EC2 and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "Creating .env file on EC2..."
          cat <<EOF > .env
          ENV=${{ secrets.ENV }}
          APP_NAME=${{ secrets.APP_NAME }}
          APP_VERSION=${{ secrets.APP_VERSION }}
          APP_PORT=${{ secrets.APP_PORT }}
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}
          DB_DIALECT=${{ secrets.DB_DIALECT }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ENABLE_APP_PREFORK=${{ secrets.ENABLE_APP_PREFORK }}
          LOG_PATH=${{ secrets.LOG_PATH }}
          LOG_PREFIX=${{ secrets.LOG_PREFIX }}
          LOG_EXT=${{ secrets.LOG_EXT }}
          ENABLE_REQUEST_LOG=${{ secrets.ENABLE_REQUEST_LOG }}
          API_TOKEN=${{ secrets.API_TOKEN }}
          CHANNEL_ID=${{ secrets.CHANNEL_ID }}
          EOF

          echo "Logging into AWS..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          echo "Stopping old container..."
          if [ "$(docker ps -q -f name=be-iniaga)" ]; then
            docker stop be-iniaga
            docker rm be-iniaga
          else
            echo "No existing container found"
          fi

          echo "Pulling new image..."
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:latest
          
          echo "Running new container..."
          docker run -d --name be-iniaga -p 9003:9003 --restart always --env-file .env ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:latest

          echo "Checking running containers..."
          docker ps -a

          echo "Cleanup old Docker images..."
          docker system prune -f

