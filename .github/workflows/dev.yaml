name: CI/CD Pipeline

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker

    - name: Remove old build cache
      run: rm -rf /tmp/.buildx-cache || true

    - name: Build Docker image
      run: |
        docker buildx build --no-cache \
                            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                            --platform linux/amd64 \
                            -t myapp .
      

      #    - name: Build Docker image
#      run: |
#        docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
#                    --cache-to=type=local,dest=/tmp/.buildx-cache \
#                    -t myapp \
#                    --load
#                    --progress=plain \
#                    .


    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Verify Docker Image
      run: docker images | grep myapp

    - name: Tag Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:$IMAGE_TAG
        docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:latest


    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: SSH into EC2 and Deploy
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.EC2_HOST }}
  #       username: ${{ secrets.EC2_USER }}
  #       key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  #       script: |
  #         echo "Creating .env file on EC2..."
  #         echo "ENV=${{ secrets.ENV }}" > .env
  #         echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
  #         echo "APP_VERSION=${{ secrets.APP_VERSION }}" >> .env
  #         echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
  #         echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
  #         echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
  #         echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
  #         echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
  #         echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
  #         echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
  #         echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
  #         echo "ENABLE_APP_PREFORK=${{ secrets.ENABLE_APP_PREFORK }}" >> .env
  #         echo "LOG_PATH=${{ secrets.LOG_PATH }}" >> .env
  #         echo "LOG_PREFIX=${{ secrets.LOG_PREFIX }}" >> .env
  #         echo "LOG_EXT=${{ secrets.LOG_EXT }}" >> .env
  #         echo "ENABLE_REQUEST_LOG=${{ secrets.ENABLE_REQUEST_LOG }}" >> .env
  #         echo "API_TOKEN=${{ secrets.API_TOKEN }}" >> .env
  #         echo "CHANNEL_ID=${{ secrets.CHANNEL_ID }}" >> .env

  #         echo "Verifying .env file..."
  #         ls -lah .env || { echo ".env file not found!"; exit 1; }

  #         echo "Logging into AWS..."
  #         aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
  #         echo "Stopping old container..."
  #         if [ "$(docker ps -q -f name=be-iniaga)" ]; then
  #           docker stop be-iniaga
  #           docker rm be-iniaga
  #         else
  #           echo "No existing container found"
  #         fi

  #         echo "Pulling new image..."
  #         docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:latest
          
  #         echo "Running new container..."
  #         docker run -d --name be-iniaga -p 9003:9003 -v $(pwd)/.env:/root/.env --env-file .env ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/zayyid/backend-sales:latest

  #         echo "Checking running containers..."
  #         docker ps -a

  #         echo "Cleanup old Docker images..."
  #         docker system prune -f


