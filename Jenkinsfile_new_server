pipeline{
    environment {
        servicename     = 'middleware-api'
        url             = 'https://harbor-img.nabatisnack.co.id'
        urlnonprotocol  = 'harbor-img.nabatisnack.co.id'
        credentialId    = 'harbor-img'
        projectdocker   = 'middleware'
        envpath         = '/root/deploy/.config/middleware-api/'
        storagepath     = '/root/deploy/storage/middleware/'
        dockerapppath   = '/api/'
        dockernetwork   = 'epc'
        sshid           = 'cicd'
    }
    agent any

    stages {
        stage('Set Environment') {
            steps {
                echo 'Setup environment'
                script {
                    switch (env.BRANCH_NAME) {
                        case 'qa':
                            env.serviceflavor = 'qa'
                            env.flavor        = 'qa'
                            env.servertarget  = env.WMS_QA_SERVER
                            env.apptag        = env.BUILD_NUMBER
                            break
                        case 'master':
                            env.flavor       = 'production'
                            env.servertarget = env.WMS_PRD_SERVER
                            env.apptag       = env.BUILD_NUMBER
                            break
                        }
                }
            }
        }

        stage('Build Image') {
            when {
                expression {
                    return env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'qa'
                }
            }
            steps {
                echo 'Build Image '+env.flavor
                sh 'docker build . -t ${servicename}:${BRANCH_NAME}-${apptag} --build-arg version=${BUILD_NUMBER}-$(git rev-parse HEAD)'
            }
        }

        stage('Docker Login tag and push') {
            when {
                expression {
                    return env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'qa'
                }
            }
            steps {
                script {
                    echo 'Push docker image to docker registry Harbor '+env.flavor
                    docker.withRegistry(url, credentialId) {
                        echo 'ini ${flavor} '+flavor
                        sh 'docker tag ${servicename}:${BRANCH_NAME}-${apptag} ${urlnonprotocol}/${projectdocker}/${servicename}:${BRANCH_NAME}-${apptag}'
                        sh 'docker push ${urlnonprotocol}/${projectdocker}/${servicename}:${BRANCH_NAME}-${apptag}'
                    }
                }
            }
        }

		stage('Set Image VM') {
            when {
                expression {
                    return env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'qa'
                }
            }
            steps {
                sh 'echo ssh connecting...'
                script {
                    sshagent (credentials: [sshid]) {
					sh 'ssh -t -o StrictHostKeyChecking=no -l cicd ${servertarget} -p 22 "pwd; sudo docker rm ${servicename}-${serviceflavor} -f;sudo docker pull ${urlnonprotocol}/${projectdocker}/${servicename}:${BRANCH_NAME}-${apptag}; sudo docker run -d --name ${servicename}-${serviceflavor} --restart unless-stopped --network=${dockernetwork} -v ${storagepath}${flavor}/log:/api/log --log-driver=loki --log-opt loki-url=http://${servertarget}:3100/loki/api/v1/push --log-opt no-file=false --log-opt max-size=50M --log-opt keep-file=true -v ${envpath}${flavor}/.env:${dockerapppath}.env --pid=host ${urlnonprotocol}/${projectdocker}/${servicename}:${BRANCH_NAME}-${apptag}"'
				}
                }
            }
        }
    }
}